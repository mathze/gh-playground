import java.util.*

plugins {
  kotlin("jvm")
  kotlin("plugin.spring")

  id("io.spring.dependency-management")
  id("org.springframework.boot")

  jacoco
  id("io.gitlab.arturbosch.detekt")

  id("org.jetbrains.dokka")
  id("org.asciidoctor.jvm.convert")

  `maven-publish`
}

repositories {
  mavenCentral()
  jcenter()
}

group = "de.qualersoft"

dependencyManagement {
  imports {
    mavenBom("org.junit:junit-bom:5.7.1")
  }
  dependencies {
    dependency("org.springframework.boot:spring-boot-starter-web:2.4.4") {
      exclude("org.springframework.boot:spring-boot-starter-tomcat")
    }
  }
}

dependencies {
  listOf("spring-boot-starter-web", "spring-boot-starter-jetty", "spring-boot-starter-actuator").forEach {
    implementation(group = "org.springframework.boot", name = it)
  }

  testImplementation(group = "org.springframework.boot", name = "spring-boot-starter-test")
  testImplementation(group = "org.jetbrains.kotlin", name = "kotlin-test-junit5")
  testRuntimeOnly(group = "org.junit.jupiter", name = "junit-jupiter-engine")
}

configure<io.gitlab.arturbosch.detekt.extensions.DetektExtension> {
  failFast = true
  config = files("$rootDir/detekt.yml")
  input = files("src/main/kotlin")

  reports {
    html.enabled = true
    xml.enabled = true
    txt.enabled = false
  }
}

jacoco {
  toolVersion = "0.8.6"
}

tasks.test {
  useJUnitPlatform()
  testLogging {
    events("passed", "skipped", "failed")
  }
}

tasks.withType<JacocoReport> {
  reports {
    xml.isEnabled = true
    html.isEnabled = true
    csv.isEnabled = false
  }
}

tasks.named<org.jetbrains.dokka.gradle.DokkaTask>("dokkaHtml") {
  outputDirectory.set(buildDir.resolve("docs/kdoc"))
}

tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile> {
  kotlinOptions {
    freeCompilerArgs = listOf("-Xjsr305=strict")
    jvmTarget = JavaVersion.VERSION_11.toString()
    useIR = true
  }
}

publishing {
  repositories {
    maven {
      name = "GitHubPackages"
      url = uri("https://maven.pkg.github.com/mathze/gh-playground")
      credentials {
        username = project.findProperty("publish.gh.mathze.gpr.usr") as String? ?: System.getenv("GH_MATHZE_USERNAME")
        password = project.findProperty("publish.gh.mathze.gpr.key") as String? ?: System.getenv("GH_MATHZE_TOKEN")
      }
    }
  }
  publications {
    register<MavenPublication>("gpr") {
      artifact(tasks.bootJar)
    }
  }
}

tasks.register("updateVersion") {
  description = """ONLY FOR CI/CD purposes!
    |
    |This task is meant to be used by CI/CD to generate new release versions.
    |Prerequists: a `gradle.properties` next to this build-script must exist.
    |Usage:
    |  > ./gradlew updateVersion -PnewVersion="the new version"
  """.trimMargin()

  doLast {
    val newVersion = project.findProperty("newVersion") as String?
      ?: throw IllegalArgumentException("No `newVersion` specified! Usage: ./gradlew updateVersion -PnewVersion=<version>")

    val propsFile = files("./gradle.properties").singleFile
    if (!propsFile.exists()) {
      val msg = "This task requires version to be stored in gradle.properties file, which does not exist!"
      throw UnsupportedOperationException(msg)
    }
    val props = Properties()
    props.load(propsFile.inputStream())
    props.setProperty("version", newVersion)
    props.store(propsFile.outputStream(), "Generated by $name task!")
  }
}